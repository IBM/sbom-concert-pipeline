apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: cve-scan
spec:
  params:
    - name: image
    - name: image_tag
  workspaces: 
    - name: output
      mountPath: /toolkit-data
  results:
    - name: output
  steps:
    - name: cve-scan
      image: icr.io/cpopen/ibm-concert-toolkit:v1.0.4
      script: |
        #!/bin/sh
        set -x

        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.54.1

        OUTPUT_FILENAME_SUFFIX="cve-scan.csv"
        CUR_DIR=$(cd $(dirname $0); pwd)
        [ -z "$DATA_OUT_PATH" ] && DATA_OUT_PATH="/toolkit-data"

        # replace the / in the image name with _ otherwise it will be treated as a directory
        # TODO: could a filename be too long?
        IMAGE="$(params.image):$(params.image_tag)"

        IMAGE_FILENAME=$(echo "$IMAGE" | tr '/' '_')
        # OUTPUT_FILENAME="${IMAGE_FILENAME}-${OUTPUT_FILENAME_SUFFIX}"
        OUTPUT_FILENAME="cve-scan.json"

        echo "Scanning image: $IMAGE"
        trivy image ${IMAGE} \
          --db-repository public.ecr.aws/aquasecurity/trivy-db \
          --java-db-repository public.ecr.aws/aquasecurity/trivy-java-db \
          --format cyclonedx --scanners vuln > "${DATA_OUT_PATH}/${OUTPUT_FILENAME}"

        if [ $? -eq 0 ] && [ -f "${DATA_OUT_PATH}/${OUTPUT_FILENAME}" ]; then
            echo "CVE scan has been generated successfully at ${DATA_OUT_PATH}/${OUTPUT_FILENAME}"
            echo -n ${DATA_OUT_PATH}/${OUTPUT_FILENAME} | tee $(results.output.path)
        else
            echo "Error: Failed to generate CVE scan for image $IMAGE."
            exit 1
        fi
